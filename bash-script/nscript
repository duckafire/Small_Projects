#!/usr/bin/env bash


# CREATE ONE OR MORE FILES WITH THE EXTENSION
# SPECIFIED, AND WRITE A SIMPLE "HELLO WORLD"
# INSIDE THEM, BUT ONLY TO SUPPORTED LANGUAGES


# nscript - New SCRIPT
# MIT License
#
# Copyright (c) 2024 DuckAfire <duckafire.github.io/nest>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


declare -r -l EXT=$1
readonly ARGV="${@:2}"

function ENDL(){
	echo ""
}


if [[ $# -eq 0 || $EXT = "help" ]]; then
	[[ $# -gt 1 ]] && echo "Many arguments are specified. They were ignored." && ENDL

	echo "> nscript <file-ext> <file-name0> [file-namen]" && ENDL && echo "Headers to: SH | sh | c | cpp | css | html | js | lua | py" && ENDL
	exit 0
fi

[[ $# -eq 1 ]] && echo "File(s) not specified" && ENDL && exit 1


# "SH" create a file no extension
declare EXT_TO_FILES=".$1"
[[ $EXT_TO_FILES = ".SH" ]] && EXT_TO_FILES=""

declare -a files_name

# add extension to files name
for arg in $ARGV; do
	files_name[${#files_name[@]}]=$arg$EXT_TO_FILES
done


declare -r -a LANG_SUPPORTED=("sh" "c" "cpp" "css" "html" "js" "lua" "py")
declare -r -a LANG_HEADERS=(
'#!/usr/bin/env bash'
'#include <stdio.h>\n\nint main(int argc, char *argv[]){\n\tputs("Hello world");\n\n\treturn 0;\n}'
'#include <iostream>\n\nint main(int argc, char *argv[]){\n\tstd::cout << "Hello world!" << std::endl;\n\treturn;\n}'
':root{\n\t\n}\n\n*{\n\t\n}\n\nhtml{\n\t\n}\n\n\nhtml:before{\n\tcontent: "Hello world!";\n}\n\nbody{\n\t\n}'
'<!DOCTYPE html>\n<html lang="en">\n<head>\n\t<metacharset="UTF-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t<title>Hello world!</title>\n</head>\n<body>\n\t\n</body>\n</html>\n'
'console.log("Hello world!");\n'
'print("Hello world!")\n'
'print("Hello world!")\n'
)


# search header to file
declare -i lang_supported_id=0

for lang in ${LANG_SUPPORTED[@]}; do
	if [[ $EXT = $lang ]]; then
		declare -r LANG_HEADER_SELECTED=${LANG_HEADERS[$lang_supported_id]}
		break
	fi

	lang_supported_id=$(( $lang_supported_id + 1 ))
done

[[ -z $LANG_HEADER_SELECTED ]] && echo "None supported language was specified. The file(s) create is(are) empty." && ENDL

unset lang_supported_id


declare -a success
declare -a fail

for file in ${files_name[@]}; do
	if [[ -f $file ]]; then
		fail[${#fail[@]}]=$file
		continue
	fi

	success[${#success[@]}]=$file
	echo -e $LANG_HEADER_SELECTED > $file
done


if [[ ${#success[@]} -ne 0 ]]; then
	echo -e "File(s) created with success:\n${success[@]}" && ENDL
fi

if [[ ${#fail[@]} -ne 0 ]]; then
	echo -e "File(s) already exist:\n${fail[@]}" && ENDL
fi

[[ ${#success[@]} -gt 0 ]] && [[ -z $EXT_TO_FILES ]] && chmod 700 ${success[@]}


exit 0
