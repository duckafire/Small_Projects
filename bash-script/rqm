#!/usr/bin/env bash

# TODO:
# -c, --compact
# -o, --ostatus [o = only]
# -O, --ojson

## NAME:       Request Manager
## VERSION:    0.0.3
## AUTHOR:     DuckAfire
## LICENSE:    MIT
## REPOSITORY: https://github.com/duckafire/Small_Projects/tree/main/bash-script
## DEPENDENCES:
## * bash      >= v5.0
## * curl      >= v7.64
## * jq        >= v1.5
## * sed       >= v4.7
## * coreutils >= v8.30

#$ rqm [-n | --nscript] <option | http-method> <api-url> [json-string]
#$ Options:
#$ -h, --help    : display this message.
#$ -H, --header  : show information about this script.
#$ -n, --nstyle  : remove the style of the output.
#$ -v, --version : print the script version.

#@ v0.0.3

# CODE CONVENTIONS #####
#
# * Explicity declaration with `declare`, `local` and `function`
# * Explicity identifier type (-i; -a; -A; ...)
# * Explicity identifiers/names
#
# * Only arrays must be used with `${}`
# * All that "return" a string must be between double quotes
# * Arrays must be "readonly", except ARGS
#
# * Algorithm must be inside of functiaons
# * Only declarations and functions call outside functions
# * No aligned functions (except to "single command functions")
# * Functions name must be formed by two, or more, words
#
# * Arguments:
# ** This argument convention are not to apply for "single command functions"
# ** Attribute them for "readonly" variables (`local -r arg_foo="$1"`)
# ** Prefix their variables name with "arg_" (local) or "ARG_" (global), except to ARGS
#
# * Code style
# ** camelCase            for variables and arrays
# ** PascalCase           for variables and arrays
# ** snake_case           for function
# ** SCREAMING_SNAKE_CASE for constants (except arrays and "argument-variables")

# SHARED CODE #####

function fatal_error(){
	local -r arg_msg="$1"

	echo -e '[!] '"$arg_msg"
	exit 1
}

function check_dependences(){
	# dep == dependences
	local -ri arg_depLength=$1
	local -ri arg_depOriginFirst=$(( $arg_depLength + 2 ))
	local -ra arg_dep=(${@:2:$arg_depLength})
	local -ra arg_depOrigin=(${@:$arg_depOriginFirst})

	for i in $(seq 0 $(( $arg_depLength - 1 ))); do
		if ! type "${arg_dep[$i]}" &> /dev/null; then
			fatal_error "Dependence not found: ${arg_depOrigin[$i]}"
		fi
	done
}

function check_option_execution(){
	local -r arg_string="$1"

	local -ra supportedOptions=("-H" "--header" "-h" "--help" "-v" "--version")
	local -i id=-1
	local regex=""

	for i in $(seq 0 $(( ${#supportedOptions[@]} - 1 ))); do
		if [[ "$arg_string" = "${supportedOptions[$i]}" ]]; then
			id=$i
			break
		fi
	done

	test $id -eq -1 && return

	case $i in
		0 | 1) regex='^\#\# ' ;; # -H, --header
		2 | 3) regex='^\#\$ ' ;; # -h, --help
		4 | 5) regex='^\#\@ ' ;; # -v, --version
	esac

	grep "$regex" "$PROGRAM_PATH/$PROGRAM_NAME" | sed -E s/"$regex"//g
	echo "" # line feed
	exit 0
}

set -u
set -o pipefail

declare -ri TRUE=1
declare -ri FALSE=0
declare -a ARGS=("${@}")

declare -r ARG_programName="$0"
declare -r PROGRAM_PATH="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
declare -r PROGRAM_NAME="$(basename "$ARG_programName")"

declare -ri ARG_argsQuantity=$#




# GLOBAL #####

declare -ra SupportedMethods=("get" "post" "put" "delete" "head" "options" "patch")

declare -ra Dependeces=(      "bash" "curl" "jq" "sed" "seq"       "dirname"   "basename")
declare -ra DependecesOrigin=("bash" "curl" "jq" "sed" "coreutils" "coreutils" "coreutils")

declare -i OutputStyle=$TRUE




# CHECK SCRIPT ARGUMENTS #####

check_dependences ${#Dependeces[@]} "${Dependeces[@]}" "${DependecesOrigin[@]}"


function check_style_blockade(){
	if [[ "${ARGS[0]}" = "-n" ]] || [[ "${ARGS[0]}" = "--nstyle" ]]; then
		
		if [[ ${#ARGS[@]} -eq 1 ]]; then
			fatal_error "None method or option was specified. Try: 'foo --help'"
		fi

		ARGS=("${ARGS[@]:1}")
		OutputStyle=$FALSE
	fi
}

check_style_blockade


function check_if_there_is_method_or_option(){
	if [[ $ARG_argsQuantity -eq 0 ]]; then
		fatal_error "None method or option was specified. Try: 'foo --help'"
	fi
}

function check_method(){
	for method in ${SupportedMethods[@]}; do
		test "$ARG_methodOption" = "$method" && return
	done

	fatal_error "The argument '$ARG_methodOption' is not a Option and it is not a HTTP Method."
}

check_if_there_is_method_or_option

declare -r ARG_methodOption="${ARGS[0]}"

check_option_execution "$ARG_methodOption"
check_method


function check_url(){
	if [[ $ARG_argsQuantity -eq 1 ]]; then
		fatal_error "Server URL was not specified."
	fi
}

function check_server(){
	if ! curl -I "$ARG_url" &> /dev/null; then
		fatal_error "It was not possible to connect to the server."
	fi
}

check_url

declare -r ARG_url="${ARGS[1]}"

check_server


# before, to use inside the function
declare ARG_json=""

function check_json(){
	[[ $ARG_argsQuantity -eq 2 ]] && return

	local -r JSON="${ARGS[@]:2}"
	echo "$JSON" | jq . &> /dev/null

	if [[ $? -ne 0 ]]; then
		fatal_error "JSON -> $(echo "$JSON" | jq . 2>&1)"
	fi

	ARG_json="$(echo "$JSON" | jq .)";
}

check_json





# MAKE REQUEST #####

function make_request(){
	# -s : --silent | -w : --write-out | -H : --header | -X : --request | -d : --data
	local -ru arg_httpMethod="$1"

	if [[ ! -z "$ARG_json" ]]; then
		echo "$(curl -s -w "%{http_code}" -X "$arg_httpMethod" -H "Content-Type: application/json" -d "$ARG_json" "$ARG_url")"
	else
		echo "$(curl -s -w "%{http_code}" -X "$arg_httpMethod" -H "Content-Type: application/json" "$ARG_url")"
	fi
}

function get_response_status(){ echo "$(echo "$1" | sed 's/^{.*}//g')"; }
function get_json(){            echo "$(echo "$1" | sed 's/[0-9]*$//g')"; }

declare -r HTTP_RESPONSE="$(make_request "$ARG_methodOption")"
declare -r RESPONSE_STATUS="$(get_response_status "$HTTP_RESPONSE")"
declare -r RESPONSE_JSON="$(get_json "$HTTP_RESPONSE")"




# SET OUTPUT STYLE #####

function format_status(){
	local -r code=$1
	local msg="" style=""

	case $code in
		100) msg="Continue" ;;
		101) msg="Switching Protocols" ;;
		102) msg="Processing (WebDAV; RFC 2518)" ;;
		103) msg="Early Hints (RFC 8297)" ;;
		200) msg="OK" ;;
		201) msg="Created" ;;
		202) msg="Accepted" ;;
		203) msg="Non-Authoritative Information (since HTTP/1.1)" ;;
		204) msg="No Content" ;;
		205) msg="Reset Content" ;;
		206) msg="Partial Content" ;;
		207) msg="Multi-Status (WebDAV; RFC 4918)" ;;
		208) msg="Already Reported (WebDAV; RFC 5842)" ;;
		226) msg="IM Used (RFC 3229)" ;;
		300) msg="Multiple Choices" ;;
		301) msg="Moved Permanently" ;;
		302) msg="Found (Previously 'Moved temporarily')" ;;
		303) msg="See Other (since HTTP/1.1)" ;;
		304) msg="Not Modified" ;;
		305) msg="Use Proxy (since HTTP/1.1)" ;;
		306) msg="Switch Proxy" ;;
		307) msg="Temporary Redirect (since HTTP/1.1)" ;;
		308) msg="Permanent Redirect" ;;
		404) msg="Not found" ;;
		400) msg="Bad Request" ;;
		401) msg="Unauthorized" ;;
		402) msg="Payment Required" ;;
		403) msg="Forbidden" ;;
		404) msg="Not Found" ;;
		405) msg="Method Not Allowed" ;;
		406) msg="Not Acceptable" ;;
		407) msg="Proxy Authentication Required" ;;
		408) msg="Request Timeout" ;;
		409) msg="Conflict" ;;
		410) msg="Gone" ;;
		411) msg="Length Required" ;;
		412) msg="Precondition Failed" ;;
		413) msg="Payload Too Large" ;;
		414) msg="URI Too Long" ;;
		415) msg="Unsupported Media Type" ;;
		416) msg="Range Not Satisfiable" ;;
		417) msg="Expectation Failed" ;;
		418) msg="I'm a teapot (RFC 2324, RFC 7168)" ;;
		421) msg="Misdirected Request" ;;
		422) msg="Unprocessable Content" ;;
		423) msg="Locked (WebDAV; RFC 4918)" ;;
		424) msg="Failed Dependency (WebDAV; RFC 4918)" ;;
		425) msg="Too Early (RFC 8470)" ;;
		426) msg="Upgrade Required" ;;
		428) msg="Precondition Required (RFC 6585)" ;;
		429) msg="Too Many Requests (RFC 6585)" ;;
		431) msg="Request Header Fields Too Large (RFC 6585)" ;;
		451) msg="Unavailable For Legal Reasons (RFC 7725)" ;;
		500) msg="Internal Server Error" ;;
		501) msg="Not Implemented" ;;
		502) msg="Bad Gateway" ;;
		503) msg="Service Unavailable" ;;
		504) msg="Gateway Timeout" ;;
		505) msg="HTTP Version Not Supported" ;;
		506) msg="Variant Also Negotiates (RFC 2295)" ;;
		507) msg="Insufficient Storage (WebDAV; RFC 4918)" ;;
		508) msg="Loop Detected (WebDAV; RFC 5842)" ;;
		510) msg="Not Extended (RFC 2774)" ;;
		511) msg="Network Authentication Required (RFC 6585)" ;;
	esac

	function openStyle(){
		local -r code=$1
		echo '\e['$code'm'
	}

	function closeStyle(){
		local -ri max=$1
		local toReturn=""
		local -r code='\e[0m'

		for i in $(seq 1 $max); do
			toReturn=$toReturn$code
		done

		echo $toReturn
	}

	if   [[ $code -lt 200 ]];                        then style=34 # information response (blue)
	elif [[ $code -gt 199 ]] && [[ $code -lt 300 ]]; then style=32 # success (green)
	elif [[ $code -gt 299 ]] && [[ $code -lt 400 ]]; then style=36 # redirection (cyan)
	elif [[ $code -gt 399 ]] && [[ $code -lt 500 ]]; then style=31 # client error (red)
	else                                                  style=35 # server error (purple)
	fi

	# nnn: message
	if [[ $OutputStyle -eq $TRUE ]]; then
		echo -e "Response status: $(openStyle $style)$(openStyle 1)$code$(closeStyle 2) - $(openStyle $style)$msg$(closeStyle 1)"
	else
		echo -e "Response status: $code - $msg"
	fi
}

function format_json(){
	declare json=$(echo "$1" | jq .)

	function regex_string(){
		# "core"
		local -ri maxScapeSupport=$1
		local -r mainChunk="$2"
		local -r finalChunk="$3"

		local -i total=0
		local toReturn="$mainChunk"

		for i in $(seq 1 $maxScapeSupport); do
			toReturn="$toReturn"'(\\"[^"\\]*'
			total=total+1
		done

		for i in $(seq 1 $total); do
			toReturn=$toReturn')*'
		done

		echo "${toReturn}${finalChunk}"
	}

	function regex_propriety(){      echo "$(regex_string $1 '([^:]?\s)("[^"\\]*' '")(: )')";  } # <"foo">: "value"
	function regex_string_value(){   echo "$(regex_string $1 '(\s)("[^"\\]*'    '")($|,$)')";  } #  "foo": <"value">
	function regex_number_value(){   echo '((:|\s)\s)([0-9]+)($|,$)';                          } #  "foo": <123>
	function regex_special_value(){  echo '((:|\s)\s)(true|false|null)($|,$)';                 } #  "foo": <true>

	function result_propriety(){     test $OutputStyle -eq $TRUE && echo '\1\\e[1m\\e[34m\2\\e[0m\\e[0m\'"$(( 2 + $1 + 1 ))" || echo '\1\2\'"$(( 2 + $1 + 1 ))";  } # blue + bold
	function result_string_value(){  test $OutputStyle -eq $TRUE && echo '\1\\e[32m\2\\e[0m\'"$(( 2 + $1 + 1 ))"             || echo '\1\2\'"$(( 2 + $1 + 1 ))";  } # green
	function result_number_value(){  test $OutputStyle -eq $TRUE && echo '\1\\e[36m\3\\e[0m\4'                               || echo '\1\3\4';                    } # cyan
	function result_special_value(){ test $OutputStyle -eq $TRUE && echo '\1\\e[1m\3\\e[0m\4'                                || echo '\1\3\4';                    } # bold

	json="$(echo -e "$json" | sed -E s/"$(regex_propriety 5)"/"$(result_propriety 5)"/g)"
	json="$(echo -e "$json" | sed -E s/"$(regex_string_value 5)"/"$(result_string_value 5)"/g)"
	json="$(echo -e "$json" | sed -E s/$(regex_number_value)/"$(result_number_value)"/g)"
	json="$(echo -e "$json" | sed -E s/$(regex_special_value)/"$(result_special_value)"/g)"

	echo -e "$json"
}

format_status "$RESPONSE_STATUS"
format_json   "$RESPONSE_JSON"

exit 0
