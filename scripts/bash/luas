#!/usr/bin/env bash

## NAME:       Lua Searcher
## VERSION:    0.0.1
## AUTHOR:     DuckAfire
## LICENSE:    MIT
## REPOSITORY: https://github.com/duckafire/Small_Projects/tree/main/bash-script
## DEPENDENCES:
## * bash      >= v5.0
## * sed       >= v4.7
## * coreutils >= v8.30

#$ luas [options | file-name]
#$ Options:
#$ -h, --help    : display this message.
#$ -H, --header  : show information about this script.
#$ -v, --version : print the script version.

#@ v0.0.1

# CODE CONVENTIONS #####
#
# * Explicity declaration with `declare`, `local` and `function`
# * Explicity identifier type (-i; -a; -A; ...)
# * Explicity identifiers/names
#
# * Only arrays must be used with `${}`
# * All that "return" a string must be between double quotes
# * Arrays must be "readonly", except ARGS
#
# * Algorithm must be inside of functiaons
# * Only declarations and functions call outside functions
# * No aligned functions (except to "single command functions")
# * Functions name must be formed by two, or more, words
#
# * Arguments:
# ** This argument convention are not to apply for "single command functions"
# ** Attribute them for "readonly" variables (`local -r arg_foo="$1"`)
# ** Prefix their variables name with "arg_" (local) or "ARG_" (global), except to ARGS
#
# * Code style
# ** camelCase            for global variables and arrays
# ** PascalCase           for local variables and arrays
# ** snake_case           for functions
# ** SCREAMING_SNAKE_CASE for constants (except arrays and "argument-variables")

# SHARED CODE #####

function fatal_error(){
	local -r arg_msg="$1"

	echo -e '[!] '"$arg_msg"
	exit 1
}

function check_option_execution(){
	local -r arg_string="$1"

	local -ra supportedOptions=("-H" "--header" "-h" "--help" "-v" "--version")
	local -i id=-1
	local regex=""

	for i in $(seq 0 $(( ${#supportedOptions[@]} - 1 ))); do
		if [[ "$arg_string" = "${supportedOptions[$i]}" ]]; then
			id=$i
			break
		fi
	done

	test $id -eq -1 && return

	case $i in
		0 | 1) regex='^\#\# ' ;; # -H, --header
		2 | 3) regex='^\#\$ ' ;; # -h, --help
		4 | 5) regex='^\#\@ ' ;; # -v, --version
	esac

	grep "$regex" "$PROGRAM_PATH/$PROGRAM_NAME" | sed -E s/"$regex"//g
	echo "" # line feed
	exit 0
}

set -u
set -o pipefail

declare -a ARGS=("${@}")

declare -r ARG_programName="$0"
declare -r PROGRAM_PATH="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
declare -r PROGRAM_NAME="$(basename "$ARG_programName")"

declare -ri ARG_argsQuantity=$#




# START

function no_args(){
	if [[ $ARG_argsQuantity -eq 0 ]]; then
		fatal_error "No arguments. Try: luas --help"
	fi
}

no_args

declare -r ARG_first="${ARGS[0]}"

check_option_execution "$ARG_first"

function search_and_run(){
	local -ra args_filesNameList=(${@})

	local -ra pathList=$(echo "$LUAS_PATH" | sed -E 's/:/ /g')

	local -a fullPathList=()
	local fullPath=""
	local fileName=""

	for path in ${pathList[@]}; do
		for _fileName in ${args_filesNameList[@]}; do
			fileName=$(echo "$_fileName" | sed -E 's/\.lua$//g')
			fullPath="$path/$fileName.lua"

			if [[ -f "$fullPath" ]]; then
				fullPathList+=("$fullPath")
			else
				echo "File not found: $_fileName"
			fi
		done
	done

	for file in ${fullPathList[@]}; do
		echo ""
		lua -e "loadfile('$file')()"
	done

	echo ""
}

search_and_run "${ARGS[@]}"

exit 0
